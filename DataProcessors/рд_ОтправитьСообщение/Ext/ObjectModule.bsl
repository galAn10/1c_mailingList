
Процедура ОтправитьСообщенияОчереди() экспорт

	   Запрос = новый Запрос;
	   Запрос.Текст = "ВЫБРАТЬ
	                  |	рд_ОчередьОтправки.ДокументИдентификатор КАК ДокументИдентификатор,
	                  |	рд_ОчередьОтправки.Сценарий КАК Сценарий,
	                  |	рд_ОчередьОтправки.ДатаРегистрации КАК ДатаРегистрации,
	                  |	рд_ОчередьОтправки.ДанныеДляОтправки КАК ДанныеДляОтправки,
	                  |	рд_ОчередьОтправки.Сценарий.УчетнаяЗаписьПочты КАК СценарийУчетнаяЗаписьПочты
	                  |ИЗ
	                  |	РегистрСведений.рд_ОчередьОтправки КАК рд_ОчередьОтправки";
	   
	  выборка = запрос.Выполнить().Выбрать();
	  
	  Пока выборка.следующий() Цикл
	  
	  	  Если значениеЗаполнено(выборка.СценарийУчетнаяЗаписьПочты) Тогда
		      параметрыСообщения =  выборка.ДанныеДляОтправки.получить();
			  
			  Если ТипЗнч(параметрыСообщения) = Тип("Структура") Тогда
			  
			  	 ОтправитьПочтовоеСообщение(параметрыСообщения);
			  
			  КонецЕсли;

		  
		  КонецЕсли;
	  
	  КонецЦикла;
	   

КонецПроцедуры


Процедура ВыполнитьАнализПоместитьСообщениеОчередь(глубинаСреза = -999, массивПриказов = неопределено)  экспорт

	   Если массивПриказов = неопределено Тогда
	   
	   	    массивПриказов = новый Массив;
	   
	   КонецЕсли;
	   
	   запрос = новый Запрос;
	   Запрос.Текст =  "ВЫБРАТЬ  различные
	   				|	рд_СценарийРассылкиДокументов.ссылка КАК Сценарий,
	   				|	рд_СценарийРассылкиДокументов.ОбъектПечати КАК ОбъектПечати,
					|	ИдентификаторыОбъектовМетаданных.ПолноеИмя   как ПолноеИмяИдентификатора,
					|	ИдентификаторыОбъектовМетаданных.Ссылка КАК ИдентификаторыОбъектовСсылка
					|ИЗ
					|	Справочник.рд_СценарийРассылкиДокументов КАК рд_СценарийРассылкиДокументов
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
					|		ПО рд_СценарийРассылкиДокументов.ОбъектПечати = ИдентификаторыОбъектовМетаданных.Ссылка
					|ГДЕ
					|	рд_СценарийРассылкиДокументов.Активно
					|	И НЕ рд_СценарийРассылкиДокументов.ПометкаУдаления ";
	   
	   ВыборкаСценарии = Запрос.Выполнить().Выбрать();
	   
	   ТекстЗапросаДокументы = "";
	   
	   запросДокументы = новый Запрос;
	   йй = 0;
	   Пока ВыборкаСценарии.Следующий() Цикл
	   
	   	     ТекстЗапросаДокументы =  ТекстЗапросаДокументы + 
			 							? (значениеЗаполнено(ТекстЗапросаДокументы) , "
																					|
														                            |ОБЪЕДИНИТЬ ВСЕ
														                            |"
																					, "") +  "ВЫБРАТЬ
					                            |	Док.Ссылка КАК Ссылка ,
												|   &Сценарий"+йй  + " как сценарий ,
												|   """ +  ВыборкаСценарии.ПолноеИмяИдентификатора + """ КАК  ПолноеИмяИдентификатора,
												|   &УИН как УИН
					                            |ИЗ
					                            |	" + ВыборкаСценарии.ПолноеИмяИдентификатора + " КАК Док
					                            |ГДЕ
					                            |	Док.Проведен
					                            |	И выбор когда &ПоДате тогда  Док.Дата >= &ДатаОтсечения иначе истина конец
												|   и выбор когда &ПоМассиву   тогда Док.Ссылка в (&массивПриказов) иначе истина конец ";
																					
																					
			запросДокументы.УстановитьПараметр("Сценарий"+йй, ВыборкаСценарии.сценарий  );
			 йй = йй + 1;
																				
	   КонецЦикла;
	   
	   Если ТекстЗапросаДокументы = "" Тогда
	   
	   	  Сообщить("Нет активных сценариев!");
	      возврат;
	   КонецЕсли;
	   
	   
	   запросДокументы.Текст = ТекстЗапросаДокументы;
	   запросДокументы.УстановитьПараметр("ДатаОтсечения", НачалоДня(ТекущаяДата() - глубинаСреза*24*60*60 ));
	   запросДокументы.УстановитьПараметр("УИН", Новый УникальныйИдентификатор);
	   запросДокументы.УстановитьПараметр("МассивПриказов", МассивПриказов);
	   запросДокументы.УстановитьПараметр("ПоДате", глубинаСреза > 0);
	   запросДокументы.УстановитьПараметр("ПоМассиву", МассивПриказов.Количество() > 0);
	   
	   ВремТаб =  запросДокументы.Выполнить().Выгрузить();
	   
	   Для каждого стр Из ВремТаб Цикл
	   
	   	   Если ЗначениеЗаполнено(стр.Ссылка) Тогда
		   
		   	    стр.УИН = стр.Ссылка.УникальныйИдентификатор();
		   
		   КонецЕсли;
	   
	   КонецЦикла;
	   
	   
	   МВТ = новый МенеджерВременныхТаблиц;
	   запрос = новый Запрос;
	   Запрос.МенеджерВременныхТаблиц = МВТ;
	   запрос.УстановитьПараметр("Исходная", ВремТаб);
	  запрос.Текст =  "ВЫБРАТЬ
	                  |	Исходная.ссылка КАК ссылка,
	                  |	Исходная.ПолноеИмяИдентификатора КАК ПолноеИмяИдентификатора,
	                  |	Исходная.сценарий КАК сценарий,
	                  |	Исходная.УИН КАК УИН
	                  |ПОМЕСТИТЬ ВТ_исходная
	                  |ИЗ
	                  |	&Исходная КАК Исходная
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	ВТ_исходная.ссылка КАК ссылка,
	                  |	ВТ_исходная.УИН КАК УИН,
	                  |	ВТ_исходная.сценарий КАК сценарий,
	                  |	ВТ_исходная.ПолноеИмяИдентификатора КАК ПолноеИмяИдентификатора,
	                  |	рд_ОчередьОтправки.ДатаРегистрации КАК ДатаОтправки
	                  |ПОМЕСТИТЬ ВТ_сОчередью
	                  |ИЗ
	                  |	ВТ_исходная КАК ВТ_исходная
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рд_ОчередьОтправки КАК рд_ОчередьОтправки
	                  |		ПО ВТ_исходная.УИН = рд_ОчередьОтправки.ДокументИдентификатор
	                  |			И ВТ_исходная.сценарий = рд_ОчередьОтправки.Сценарий
	                  |;
					  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	ВТ_исходная.ссылка КАК ссылка,
	                  |	ВТ_исходная.УИН КАК УИН,
	                  |	ВТ_исходная.сценарий КАК сценарий,
	                  |	ВТ_исходная.ПолноеИмяИдентификатора КАК ПолноеИмяИдентификатора,
	                  |	естьNull(ВТ_исходная.ДатаОтправки , рд_ИсторияРассылокДокументов.ДатаОтправки) КАК ДатаОтправки
	                  |ПОМЕСТИТЬ ВТ_сОтправленными
	                  |ИЗ
	                  |	ВТ_сОчередью КАК ВТ_исходная
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рд_ИсторияРассылокДокументов КАК рд_ИсторияРассылокДокументов
	                  |		ПО ВТ_исходная.УИН = рд_ИсторияРассылокДокументов.ДокументИдентификатор
	                  |			И ВТ_исходная.сценарий = рд_ИсторияРассылокДокументов.Сценарий
	                  |;

					  
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	ВТ_сОтправленными.ссылка КАК ссылка,
	                  |	ВТ_сОтправленными.УИН КАК УИН,
	                  |	ВТ_сОтправленными.ПолноеИмяИдентификатора КАК ПолноеИмяИдентификатора,
	                  |	ВТ_сОтправленными.ДатаОтправки КАК ДатаОтправки,
	                  |	ВТ_сОтправленными.сценарий КАК Сценарий,
	                  |	рд_СценарийРассылкиДокументов.ОбъектПечати КАК ОбъектПечати,
	                  |	рд_СценарийРассылкиДокументов.МакетПечати КАК МакетПечати,
	                  |	рд_СценарийРассылкиДокументов.ШаблонСообщения КАК ШаблонСообщения,
	                  |	рд_СценарийРассылкиДокументов.УчетнаяЗаписьПочты КАК УчетнаяЗаписьПочты,
	                  |	рд_СценарийРассылкиДокументов.РеквизитАдресации КАК РеквизитАдресации,
	                  |	рд_СценарийРассылкиДокументов.АдресОтвета КАК АдресОтвета,
	                  |	рд_СценарийРассылкиДокументов.ТемаСообщения КАК ТемаСообщения,
	                  |	рд_СценарийРассылкиДокументов.Формат КАК Формат,
	                  |	рд_СценарийРассылкиДокументов.Приоритет КАК приоритет,
	                  |	рд_СценарийРассылкиДокументов.ПолучателиКопийОтправлений.(
	                  |		Ссылка КАК Ссылка,
	                  |		НомерСтроки КАК НомерСтроки,
	                  |		Получатель КАК Получатель
	                  |	) КАК ПолучателиКопийОтправлений
	                  |ИЗ
	                  |	ВТ_сОтправленными КАК ВТ_сОтправленными
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.рд_СценарийРассылкиДокументов КАК рд_СценарийРассылкиДокументов
	                  |		ПО ВТ_сОтправленными.сценарий = рд_СценарийРассылкиДокументов.Ссылка
	                  |ГДЕ
	                  |	ВТ_сОтправленными.ДатаОтправки ЕСТЬ NULL
	                  |
	                  |УПОРЯДОЧИТЬ ПО
	                  |	рд_СценарийРассылкиДокументов.Приоритет" ;


	  
	  Выборка = запрос.Выполнить().Выбрать();
	  
	  Пока Выборка.Следующий() Цикл
	  
	  	  структураСообщения = сформироватьСтруктуруСообщения(Выборка);
		  //ОтправитьПочтовоеСообщение(структураСообщения);
		  поместитьСообщениеВОчередь(структураСообщения);
		  
	  КонецЦикла;
	  
	  
КонецПроцедуры
  
Функция сформироватьСтруктуруСообщения(Выборка)

	 структураСообщения = новый Структура();
	 
	 структураСообщения.Вставить("УчетнаяЗапись" , Выборка.УчетнаяЗаписьПочты );
	 структураСообщения.Вставить("Ссылка" , Выборка.ссылка );
	 структураСообщения.Вставить("сценарий" , Выборка.сценарий );
	 структураСообщения.Вставить("УИН" , Выборка.УИН );
	 структураСообщения.Вставить("ПолноеИмяИдентификатора", Выборка.ПолноеИмяИдентификатора ); 
	 структураСообщения.Вставить("РеквизитАдресации", Выборка.РеквизитАдресации );	
	 структураСообщения.Вставить("МакетПечати" , Выборка.МакетПечати );
	 структураСообщения.Вставить("ОбъектПечати" , Выборка.ОбъектПечати );
	 структураСообщения.Вставить("Формат" , Выборка.Формат );

	 
	 ///////
	 структураПисьма = новый Структура();
	 
	 КопииКому = новый Массив;
	 выборкаКопии = выборка.ПолучателиКопийОтправлений.выбрать();
	 
	 	Пока  выборкаКопии.следующий() Цикл
	        КопииКому.Добавить(новый Структура("Адрес, Представление",выборкаКопии.Получатель , выборкаКопии.Получатель) );
	  	
	  
	    КонецЦикла;
	 структураПисьма.Вставить("Копии",КопииКому );
	 
	 структураПисьма.Вставить("АдресОтвета", Выборка.АдресОтвета );
	 
	 ТемаСообщения =  "" + Выборка.ТемаСообщения;
	 Тело = "" + Выборка.ШаблонСообщения;
	 
	 Для каждого элСообщения Из структураСообщения Цикл
	 
	 	 ТемаСообщения =  СтрЗаменить(ТемаСообщения,"%" + элСообщения.Ключ , строка(элСообщения.Значение)) ;
	 	 Тело = СтрЗаменить(Тело,"%" + элСообщения.Ключ , строка(элСообщения.Значение)) ;

	 
	 КонецЦикла;
	 
	 
	 структураПисьма.Вставить("ТемаСообщения",ТемаСообщения);
	 структураПисьма.Вставить("Тело",  Тело  );
	 ///////////////
	 структураСообщения.Вставить("ПараметрыПисьма" ,структураПисьма );
	 
	 возврат структураСообщения;

КонецФункции // ()
  
Процедура поместитьСообщениеВОчередь(структураСообщения)

		
	ПараметрыПисьма = структураСообщения.ПараметрыПисьма;
	
	ПараметрыПисьма.вставить("Вложения", СформироватьКомплектПечатныхФорм(структураСообщения.ссылка  , 
											структураСообщения.МакетПечати , структураСообщения.ОбъектПечати,
											структураСообщения.Формат));
	
	Если ПараметрыПисьма.Свойство("Кому")= ложь или не ЗначениеЗаполнено(ПараметрыПисьма.Кому) Тогда
		
		заполнитьПолучателяПоРеквизитуАдресации(ПараметрыПисьма, структураСообщения);
			
	
	КонецЕсли; 
	
		
	// нет адресации. рассылаем в копии
	Если не ЗначениеЗаполнено(ПараметрыПисьма.Кому) Тогда
	
		 ПараметрыПисьма.вставить("Кому", ПараметрыПисьма.копии  );
	
	КонецЕсли; 
	
	// нет ничего. вообще не рассылаем
	Если не ЗначениеЗаполнено(ПараметрыПисьма.Кому) Тогда
		
		 ЗаписьЖурналаРегистрации("рд_РассылкаДокументов", УровеньЖурналаРегистрации.Ошибка,,,"Нет адресов для рассылки!  " + структураСообщения.ссылка,);

		 возврат ;
	
	КонецЕсли; 

	комуСтрокой = "";
	Если типЗнч(ПараметрыПисьма.Кому) = тип("Массив") Тогда
	
		Для каждого адр Из ПараметрыПисьма.Кому Цикл
		
			  комуСтрокой = комуСтрокой + ?(комуСтрокой = "" ,"", " ;"  ) + адр.адрес;

		
		КонецЦикла;
	
	Иначе
	
		комуСтрокой = комуСтрокой + ПараметрыПисьма.Кому;

	
	КонецЕсли;
	
	структураСообщения.вставить("Кому", КомуСтрокой);

	
	Если ПараметрыПисьма = Неопределено Тогда
		Возврат ;
	КонецЕсли;

	структураСообщения.вставить("ПараметрыПисьма", ПараметрыПисьма);

	данныеДляОтправки = новый хранилищеЗначения(структураСообщения);

	
 менеджерЗаписи = регистрыСведений.рд_ОчередьОтправки.СоздатьМенеджерЗаписи();
 менеджерЗаписи.ДатаРегистрации = текущаяДата();
 менеджерЗаписи.ДокументИдентификатор = структураСообщения.УИН;
 менеджерЗаписи.ДанныеДляОтправки	=  данныеДляОтправки;
 менеджерЗаписи.Сценарий			=  структураСообщения.Сценарий;
 
 Попытка
 
 	 менеджерЗаписи.Записать();
 
 Исключение
     ЗаписьЖурналаРегистрации("рд_РассылкаДокументов", УровеньЖурналаРегистрации.Ошибка,,,"Ошибка записи очереди!  " + структураСообщения.ссылка,);

 КонецПопытки;
 
КонецПроцедуры
  

////  параметрыСообщения  -   Структура
////
////   УчетнаяЗапись - учетная запись почты отправки сценария

	// Ссылка    ссылка на источник печатной формы
	// сценарий - сценарий отправки
	// УИН     - идентификатор объекта
	// ПолноеИмяИдентификатора   - полное имя идентификатора метаданных объекта печати 
	// РеквизитАдресации	-  реквизит адресации. Если в парамет рах письма заполнено свойство "Кому" - использоваться не будет
	// МакетПечати	- имя формируемого макета ( встроенный или внешняя обработка)
	// ОбъектПечати   - имя идентификатора объекта метаданных
	// Формат  - формат вложения



//структураПисьма - Структура параметров письма
//	Тема - строка
//	Тело - строка
//	АдресОтвета - строка
//	Копии - строка или массив Структура "адрес,представление"
//    Кому - строка или массив Структура "адрес,представление"  . Если это свойство заполнено, реквизит адресации анализироваться не будет

Функция ОтправитьПочтовоеСообщение(параметрыСообщения) экспорт
	
	УчетнаяЗапись = параметрыСообщения.УчетнаяЗапись;
	ПараметрыПисьма = параметрыСообщения.ПараметрыПисьма;
		
	Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
	РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
	РаботаСПочтовымиСообщениямиПереопределяемый.ПослеОтправкиПисьма(ПараметрыПисьма);

	записатьИсториюРассылок(параметрыСообщения,  РезультатОтправки );
	
		
	Возврат Истина;
	
КонецФункции

Процедура записатьИсториюРассылок(параметрыСообщения,  РезультатОтправки )

	 менеджерЗаписи = регистрыСведений.рд_ИсторияРассылокДокументов.СоздатьМенеджерЗаписи();
	 менеджерЗаписи.ДатаОтправки = ТекущаяДата();
	 менеджерЗаписи.ИдентификаторСообщения = "" + РезультатОтправки.ИдентификаторПисьмаIMAP + РезультатОтправки.ИдентификаторПисьмаSMTP;
	 менеджерЗаписи.Кому = параметрыСообщения.Кому;
	 менеджерЗаписи.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(параметрыСообщения.Ссылка); 
	 менеджерЗаписи.ДокументИдентификатор	= параметрыСообщения.Ссылка.уникальныйИдентификатор();
	 менеджерЗаписи.Сценарий			= параметрыСообщения.сценарий;
	 менеджерЗаписи.Представление       = строка(параметрыСообщения.Ссылка);
	 Попытка
	 
	 	 менеджерЗаписи.Записать();
	 
	 Исключение
		 сообщить(ОписаниеОшибки());
	     ЗаписьЖурналаРегистрации("рд_РассылкаДокументов", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки(),);

	 КонецПопытки;

	 // погасим очередь
	 погаситьЗаписьОчереди(параметрыСообщения);
	 	 
КонецПроцедуры

Процедура погаситьЗаписьОчереди(параметрыСообщения) экспорт

	 наборЗаписей = регистрыСведений.рд_ОчередьОтправки.СоздатьНаборЗаписей();
	 наборЗаписей.Отбор.ДокументИдентификатор.установить(параметрыСообщения.УИН);
	 наборЗаписей.Отбор.Сценарий.установить(параметрыСообщения.Сценарий);
	 
	 Попытка
	 
	 	НаборЗаписей.Записать();	
	 
	 Исключение
	    ЗаписьЖурналаРегистрации("рд_РассылкаДокументов", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки(),);

	 КонецПопытки;


КонецПроцедуры



Процедура заполнитьПолучателяПоРеквизитуАдресации(ПараметрыПисьма, исходныеПараметры)
	
	 Если не ЗначениеЗаполнено(исходныеПараметры.РеквизитАдресации) Тогда
	    ПараметрыПисьма.Вставить("Кому", "" );

	 	возврат;
	 
	 КонецЕсли;


	запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектРассылки." + исходныеПараметры.РеквизитАдресации + ".КонтактнаяИнформация.(
	               |		АдресЭП КАК АдресЭП
	               |	) КАК КИ
	               |ИЗ
	               |	" + исходныеПараметры.ПолноеИмяИдентификатора   +  "  КАК ОбъектРассылки
	               |ГДЕ
	               |	ОбъектРассылки.Ссылка = &Ссылка
	               |	И ОбъектРассылки." + исходныеПараметры.РеквизитАдресации + ".КонтактнаяИнформация.Тип = значение(перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты  )" ;
	
	запрос.УстановитьПараметр("Ссылка" , исходныеПараметры.Ссылка);
	
	массивАдресов = новый Массив;
	
	выборка = запрос.Выполнить().Выбрать();
	
	Пока выборка.Следующий() Цикл
	
		  выборкаАдресов = выборка.КИ.Выбрать();
		  
		  Пока выборкаАдресов.Следующий() Цикл
		  
			
			   массивАдресов.Добавить(новый Структура("Адрес, Представление",выборкаАдресов.АдресЭП , выборкаАдресов.АдресЭП)); 
		  
		  КонецЦикла; 
	
	КонецЦикла; 
	

	ПараметрыПисьма.Вставить("Кому", массивАдресов );


КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(ссылкаОбъекта  ,  МакетПечати, ОбъектПечати, Формат)

	  комплектПечатныхФорм = новый Массив;
	  
	  // массив cтруктур  АдресВоВременномХранилище , представление	 
	  
	  ОбъектМетаданных = общегоНазначения.ОбъектМетаданныхПоИдентификатору(ОбъектПечати, ложь);
	  КомандыПечати = УправлениеПечатью. КомандыПечатиОбъекта(ОбъектМетаданных);

	   ИмяМенеджераПечати = "";
	   ОписаниеКоманды = новый Структура;
	  структураПоиска = новый Структура("Идентификатор", МакетПечати); 
	   массивСтрок = КомандыПечати.найтиСтроки(структураПоиска);
	   Для каждого строка Из массивСтрок Цикл
	   
	   	    ИмяМенеджераПечати = строка.МенеджерПечати;
			ОписаниеКоманды = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(строка);

	   
	   КонецЦикла; 
	  
	  //
	  
	  ИменаМакетов = новый Массив;
	  ИменаМакетов.Добавить(МакетПечати);
	  
	  ПараметрКоманды = новый Массив;
	  ПараметрКоманды.Добавить(ссылкаОбъекта);
	  
	  ДополнительныеПараметры = Новый Структура;
	  
	  Если  ИмяМенеджераПечати =  "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки"Тогда
	      КоллекцияПечатныхФорм =управлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(новый массив);
	  	  Попытка
			ПараметрыПечати = Новый Структура;
			ПараметрыПечати.Вставить("ИдентификаторКоманды", ОписаниеКоманды.Идентификатор);
			ПараметрыПечати.Вставить("ОбъектыНазначения", ПараметрКоманды);
			
			ПараметрыВывода = новый структура();
			
			ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ОписаниеКоманды.ДополнительныеПараметры.Ссылка,
					ПараметрыПечати,  КоллекцияПечатныхФорм, ПараметрКоманды, ПараметрыВывода);
		Исключение
			 
		КонецПопытки;

	     
	  Иначе
	  
	  	  ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов,
		  ПараметрКоманды, ДополнительныеПараметры, неопределено);

		  КоллекцияПечатныхФорм = ПечатныеФормы.КоллекцияПечатныхФорм;
	  
	  КонецЕсли;
	  
	  
	  		таблицаРасширений = стандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();
			инд = 1;
			Для каждого печФорма Из КоллекцияПечатныхФорм Цикл
				
				расш = "pdf";
				ТипДок = типФайлаТабличногоДокумента.PDF;
				структураПоиска = новый Структура("ссылка", формат);
				МассивСтрок =  таблицаРасширений.найтиСтроки(структураПоиска);
				
				Для каждого элем Из МассивСтрок Цикл
				
					расш = элем.Расширение;
				    ТипФайлаДок = элем.ТипФайлаТабличногоДокумента;
				КонецЦикла; 
				
				// массив cтруктур  АдресВоВременномХранилище , представление	
				 структураВложения = новый Структура();
				 
				 структураВложения.Вставить( "АдресВоВременномХранилище" , ТабличныйДокументВДвоичныеДанные(печФорма.ТабличныйДокумент, ТипФайлаДок)) ;
				 структураВложения.Вставить("Представление", ""+ ссылкаОбъекта+ "("+инд+")." +расш); 
				 
				 комплектПечатныхФорм.Добавить(структураВложения );
				 инд = инд + 1;
			КонецЦикла;
	  
	  возврат  комплектПечатныхФорм;

КонецФункции // ()

// Заимствовано из модуля УправлениеПечатью, поскольку не экспортная
// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент - 
// 	Формат - ТипФайлаТабличногоДокумента - 
// Возвращаемое значение:
// 	ДвоичныеДанные - 
Функция ТабличныйДокументВДвоичныеДанные(ТабличныйДокумент, Формат)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабличныйДокумент.Записать(ИмяВременногоФайла, Формат);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Возврат ДвоичныеДанные;
	
КонецФункции


